/* 
 * File:   GromacsModule.h
 * Author: kulkem
 *
 * Created on May 13, 2016, 11:40 AM
 */

#ifndef GROMACSINTERFACE_H
#define	GROMACSINTERFACE_H

#include "gromacs/trajectoryanalysis/analysismodule.h"
#include "gromacs/utility/classhelpers.h"

#include "gromacs/commandline/cmdlinehelpcontext.h"
#include "gromacs/options/options.h"
#include "gromacs/commandline/cmdlinemodule.h"
#include "GromacsSubModule.h"

namespace gmx
{

class GromacsModuleManager;
class CommandLineHelpContext;
class GromacsModuleSettings;
class GromacsModuleInterface;

class GromacsModule
{
    public:
       
        int runAsMain(int argc, char *argv[]);
        
        /*
         SubModule neads to be valid for the whole run of GromacsModule
         */
        
        void addSubModule(GromacsSubModule *SubModule, std::string identifier);
        
        /*
         returns the module with the identifier name or NULL if not found
         */
        
        GromacsSubModule* getSubModule(std::string identifier);
        
        const GromacsModuleSettings& getSettings();

        GromacsModule(const GromacsModuleSettings &settings, GromacsModuleInterface* interface, const char *name, const char *description);
        ~GromacsModule();
        
    private:
        
         /*! \brief
         * Parses options from the given command line and runs the analysis.
         *
         * \throws  multiple  Exceptions are used to indicate errors.
         * \returns Zero on success.
         */
        int run(int argc, char *argv[]);
        
         /*! \brief
         * Prints help for the module, including common options from the runner.
         *
         * \param[in] context  Context object for writing the help.
         * \throws    std::bad_alloc if out of memory.
         * \throws    FileIOError on any I/O error.
         */
        void writeHelp(const CommandLineHelpContext &context);
        
        void init(CommandLineModuleSettings* settings);
        
        
        class Impl;

        PrivateImplPointer<Impl> impl_;
};

class GromacsModuleSettings 
{
private:
    GMX_DISALLOW_ASSIGN(GromacsModuleSettings);
    
public:
    GromacsModuleSettings()
    {
        iNiceLevel = 19;
        bVersion = false;
        bHelp = false;
        bBackup = true;
        bfException = false;
        iDebuglevel = 0;
        bPrintCopyright = false;
        bPrintExtendedInfo = false;
        bPrintGeneratedHeader = false;
        bDefaultIndexGroups = true;
        bHidden = false;
        bQuiet = false;
        cPrintSuffix = "";
        cPrintPrefix = "";
        ReferencePosType = "atom";
    }
    GromacsModuleSettings(const GromacsModuleSettings& orig)
    {
        iNiceLevel = orig.iNiceLevel;
        bVersion = orig.bVersion;
        bHelp = orig.bHelp;
        bBackup = orig.bBackup;
        bfException = orig.bfException;
        iDebuglevel = orig.iDebuglevel;
        bPrintCopyright = orig.bPrintCopyright;
        bPrintExtendedInfo = orig.bPrintExtendedInfo;
        bPrintGeneratedHeader = orig.bPrintGeneratedHeader;
        bDefaultIndexGroups = orig.bDefaultIndexGroups;
        bHidden = orig.bHidden;
        bQuiet = orig.bQuiet;
        cPrintSuffix = orig.cPrintSuffix;
        cPrintPrefix = orig.cPrintPrefix;
        ReferencePosType = orig.ReferencePosType;
    }
    virtual ~GromacsModuleSettings() {}
    
    void niceLevel(int nl) {iNiceLevel=nl;}     //Standard Nice level of the module
    void versionOnly(bool v) {bVersion = v;}    //print bVersion and quit
    void helpOnly(bool h) {bHelp = h;}          //print bHelp and quit
    void backups(bool b) {bBackup = b;}         //make a bBackup of all files written to
    void exceptions(bool e) {bfException = e;}  //floating point exceptions
    void showHidden(bool s) {bHidden = s;}      //show hidden settings
    void quiet(bool q) {bQuiet = q;}            //dont print quotes and starting information
    void defaultIndexGroups(bool i) {bDefaultIndexGroups = i;}      //Initialize default index groups
    void debugLevel(int i) {iDebuglevel = i;}   //regulates the output of the program
    void printCopyright(bool p) {bPrintCopyright = p;}              //the gromacs copyright information at the start
    void printExtendedInfo(bool ei) {bPrintExtendedInfo = ei;}      //extended build setting information
    void printGenerateHeader(bool gh) {bPrintGeneratedHeader = gh;} //print "Generated by" at the start of outputfiles
    void printSuffix(std::string suffix) {cPrintSuffix = suffix;}   //print string at the end of each line
    void printPrefix(std::string prefix) {cPrintPrefix = prefix;}   //print prefix at the start of each line
    void refPosType(std::string rpt) {ReferencePosType = rpt;}      //type for the reference position of selections
    
    int iNiceLevel; //Standard Nice level of the module
    bool bVersion; //print bVersion and quit
    bool bHelp; //print bHelp and quit
    bool bBackup; //make a bBackup of all files written to
    bool bfException; //floating point exceptions
    bool bHidden; //show hidden settings
    bool bQuiet; //dont print quotes and starting information
    bool bDefaultIndexGroups; //Initialize default index groups
    int iDebuglevel;
    bool bPrintCopyright; //the gromacs copyright information at the start
    bool bPrintExtendedInfo; //extended build setting information
    bool bPrintGeneratedHeader; //print "Generated by" at the start of outputfiles
    std::string cPrintSuffix; //print string at the end of each line
    std::string cPrintPrefix; //print prefix at the start of each line
    std::string ReferencePosType; //type for the reference position of selections
};

class GromacsModuleInterface {
public:
    GromacsModuleInterface() {}
    virtual ~GromacsModuleInterface() {}
    
    
    //callback function after parameter initialization
    virtual int callback(int argc, char** argv, GromacsModule* module) {};
    
    //initialize additional parameters
    virtual void initOptions(Options* options, const GromacsModuleSettings& settings) {};
    
    //function after the initialization of the parameters
    virtual void finishOptions(Options* options, const GromacsModuleSettings& settings) {};
    
private:

};

} // namespace gmx

#endif
