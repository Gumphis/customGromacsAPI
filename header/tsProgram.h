/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* 
 * File:   tsProgram.h
 * Author: kulkem
 *
 * Created on July 27, 2017, 2:23 PM
 */

#pragma once
#include "gromacs/utility/classhelpers.h"
#include "gromacs/utility/gmxassert.h"
#include "gromacs/utility/uniqueptr.h"
#include "tsAbstractModule.h"
#include "tsUtility.h"
#include "tsOption.h"

namespace gmx
{

class tsProgramSettings;
class tsProgramSettingsInfo;

//*****************************************************************

class tsProgramInterface
{
public:
    tsProgramInterface() {}
    virtual ~tsProgramInterface() {}
    
    virtual void initModules(tsModules* modules) = 0;                                           //Register your Modules
    virtual int  callback(tsModules* module) = 0;                                               //callback function after parameter initialization
    virtual void initOptions(tsOptions* options, const tsProgramSettingsInfo& settings) = 0;      //initialize additional parameters
    virtual void finishOptions(tsOptions* options, const tsProgramSettingsInfo& settings) = 0;    //function after the initialization of the parameters
};

//*****************************************************************

class tsProgram
{
public:
    
    template <class Interface>
    static int run(int argc, char *argv[], const tsProgramSettings& settings)
    {
        Interface* interface = new Interface;
        tsProgramSettings settings_(std::move(settings));
        tsProgramSettingsInfo info(&settings_);
        tsProgram program(interface, info);
        int ret = program.run(argc, argv);
        TS_SAFE_DELETE(interface);
        return ret;
    }
    ~tsProgram();

private:
    tsProgram(tsProgramInterface* Interface, tsProgramSettingsInfo& settings);
    int run(int argc, char *argv[]);
    
    class Impl;
    PrivateImplPointer<Impl> impl_;
};

//*****************************************************************

class tsProgramSettingsInfo
{
public:
    explicit tsProgramSettingsInfo(tsProgramSettings* settings);
    ~tsProgramSettingsInfo();
    
    int  progNiceLevel();                       //Standard Nice level of the module
    int  progDebugLevel();                      //regulates the output of the program
    bool progVersionOnly();                     //print bVersion and quit
    bool progHelpOnly();                        //print bHelp and quit
    const std::string& selRefPosType();         //type for the reference position of selections
    bool selDefaultIndexGroups();               //Initialize default index groups
    bool fileGenerateHeader();                  //print "Generated by" at the start of outputfiles
    bool fileBackups();                         //make a backup of all files written to
    bool cmdQuiet();                            //dont print quotes and starting information
    bool cmdCopyright();                        //the gromacs copyright information at the start
    bool cmdExtendedInfo();                     //extended build setting information  
    const std::string& cmdSuffix();             //print string at the end of each line
    const std::string& cmdPrefix();             //print prefix at the start of each line
    bool cmdHelpLongDescriptions();             //print long help description
    int cmdLineLength();                        //line length in the command console
    int cmdHelpSynopsisIntend();                //maximum intend in the synopsis of the help
    bool cmdHelpShowHidden();                   //show hidden settings
    bool excpFloatingPoint();                   //floating point exceptions
    
    const std::string& getName();               //Name of the Program
    const std::string& getDescription();        //Description of the Program
    
private:
    tsProgramSettings* settings_;
    
    friend class tsProgram;
};

//*****************************************************************

class tsProgramSettings 
{
public:
    explicit tsProgramSettings(const std::string& name, const std::string& description);
    ~tsProgramSettings();
    
    typedef tsProgramSettings MyClass;
    
    MyClass& progNiceLevel(int nl);                     //Standard Nice level of the module
    MyClass& progDebugLevel(int i);                     //regulates the output of the program
    MyClass& progVersionOnly(bool v);                   //print bVersion and quit
    MyClass& progHelpOnly(bool h);                      //print bHelp and quit
    MyClass& selDefaultIndexGroups(bool i);             //Initialize default index groups
    MyClass& selRefPosType(const std::string& rpt);     //type for the reference position of selections
    MyClass& fileGenerateHeader(bool gh);               //print "Generated by" at the start of outputfiles
    MyClass& fileBackups(bool b);                       //make a bBackup of all files written to
    MyClass& cmdQuiet(bool q);                          //dont print quotes and starting information
    MyClass& cmdCopyright(bool p);                      //the gromacs copyright information at the start
    MyClass& cmdExtendedInfo(bool ei);                  //extended build setting information
    MyClass& cmdSuffix(const std::string& suffix);      //print string at the end of each line
    MyClass& cmdPrefix(const std::string& prefix);      //print prefix at the start of each line
    MyClass& cmdHelpLongDescriptions(bool hd);          //print long help descriptions
    MyClass& cmdLineLength(int length);                 //The line length for console programs
    MyClass& cmdHelpSynopsisIntend(int intend);         //The minimum intend of the help synopsis
    MyClass& cmdHelpShowHidden(bool s);                 //show hidden settings
    MyClass& excpFloatingPoint(bool e);                 //floating point exceptions
    
private:  
    std::string name_;
    std::string description_;
    std::string sCmdSuffix_;
    std::string sCmdPrefix_;
    std::string sSelRefPosType_;
    bool bCmdHelpLongDescriptions_;
    bool bProgVersionOnly_;
    bool bProgHelpOnly_;
    bool bCmdHelpShowHidden_;
    bool bCmdExtendedInfo_;
    bool bCmdCopyright_;
    bool bFileGenerateHeader_;
    bool bSelDefaultIndexGroups_;
    bool bCmdQuiet_;
    bool bFileBackups_;
    bool bExcpFloatingPoint_; 
    int iCmdLineLength_;
    int iCmdHelpSynopsisIntend_;
    int iprogDebuglevel_;
    int iprogNiceLevel_;
    
    friend class tsProgramSettingsInfo;
    friend class tsProgram;
};

} // namespace gmx


